// <auto-generated />
using System;
using Infraestructure.Persistense;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infraestructure.Migrations
{
    [DbContext(typeof(ArgenMotoDbContext))]
    partial class ArgenMotoDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.ArticuloProveedor", b =>
                {
                    b.Property<int>("ArticuloProveedorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArticuloProveedorId"));

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrecioUnitario")
                        .HasColumnType("int");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("Producto");

                    b.Property<int>("ProveedorId")
                        .HasColumnType("int")
                        .HasColumnName("Proveedor");

                    b.HasKey("ArticuloProveedorId");

                    b.HasIndex("ProductoId");

                    b.HasIndex("ProveedorId");

                    b.ToTable("ArticulosProveedor", (string)null);

                    b.HasData(
                        new
                        {
                            ArticuloProveedorId = 1,
                            Marca = "Yamaha",
                            Modelo = "MT-07",
                            Nombre = "Yamaha MT-07",
                            PrecioUnitario = 150000,
                            ProductoId = 1,
                            ProveedorId = 1
                        },
                        new
                        {
                            ArticuloProveedorId = 2,
                            Marca = "Honda",
                            Modelo = "CB500F",
                            Nombre = "Honda CB500F",
                            PrecioUnitario = 180000,
                            ProductoId = 2,
                            ProveedorId = 1
                        },
                        new
                        {
                            ArticuloProveedorId = 3,
                            Marca = "Kawasaki",
                            Modelo = "Ninja 400",
                            Nombre = "Kawasaki Ninja 400",
                            PrecioUnitario = 200000,
                            ProductoId = 3,
                            ProveedorId = 1
                        },
                        new
                        {
                            ArticuloProveedorId = 4,
                            Marca = "Suzuki",
                            Modelo = "V-Strom 650",
                            Nombre = "Suzuki V-Strom 650",
                            PrecioUnitario = 160000,
                            ProductoId = 4,
                            ProveedorId = 2
                        },
                        new
                        {
                            ArticuloProveedorId = 5,
                            Marca = "BMW",
                            Modelo = "R 1250 GS",
                            Nombre = "BMW R 1250 GS",
                            PrecioUnitario = 300000,
                            ProductoId = 5,
                            ProveedorId = 2
                        },
                        new
                        {
                            ArticuloProveedorId = 6,
                            Marca = "Ducati",
                            Modelo = "Monster 821",
                            Nombre = "Ducati Monster 821",
                            PrecioUnitario = 250000,
                            ProductoId = 6,
                            ProveedorId = 3
                        },
                        new
                        {
                            ArticuloProveedorId = 7,
                            Marca = "Harley-Davidson",
                            Modelo = "Iron 883",
                            Nombre = "Harley-Davidson Iron 883",
                            PrecioUnitario = 400000,
                            ProductoId = 7,
                            ProveedorId = 4
                        });
                });

            modelBuilder.Entity("Domain.Entities.Cliente", b =>
                {
                    b.Property<int>("ClienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClienteId"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DNI")
                        .HasColumnType("int");

                    b.Property<string>("Domicilio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Localidad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Provincia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Telefono")
                        .HasColumnType("int");

                    b.HasKey("ClienteId");

                    b.ToTable("Cliente", (string)null);

                    b.HasData(
                        new
                        {
                            ClienteId = 1,
                            Apellido = "Pérez",
                            DNI = 12345678,
                            Domicilio = "Calle 30 214",
                            Email = "carlos@gmail.com",
                            Localidad = "Quilmes",
                            Nombre = "Juan",
                            Provincia = "Buenos Aires",
                            Telefono = 422589654
                        },
                        new
                        {
                            ClienteId = 2,
                            Apellido = "García",
                            DNI = 23456789,
                            Domicilio = "Calle 30 231",
                            Email = "garciana@gmail.com",
                            Localidad = "Florencio Varela",
                            Nombre = "Ana",
                            Provincia = "Buenos Aires",
                            Telefono = 45678932
                        },
                        new
                        {
                            ClienteId = 3,
                            Apellido = "Martínez",
                            DNI = 34567890,
                            Domicilio = "Calle 12 1024",
                            Email = "luis@gmail.com",
                            Localidad = "Berazategui",
                            Nombre = "Luis",
                            Provincia = "Buenos Aires",
                            Telefono = 1124568935
                        },
                        new
                        {
                            ClienteId = 4,
                            Apellido = "Lopez",
                            DNI = 45678901,
                            Domicilio = "Calle 28 1235",
                            Email = "marta@yahoo.com",
                            Localidad = "Berazategui",
                            Nombre = "Marta",
                            Provincia = "Buenos Aires",
                            Telefono = 1124567835
                        },
                        new
                        {
                            ClienteId = 5,
                            Apellido = "Fernández",
                            DNI = 56789012,
                            Domicilio = "Mitre 1234",
                            Email = "carlitos@yahoo.com",
                            Localidad = "Quilmes",
                            Nombre = "Carlos",
                            Provincia = "Buenos Aires",
                            Telefono = 1145623789
                        });
                });

            modelBuilder.Entity("Domain.Entities.Documento", b =>
                {
                    b.Property<int>("DocumentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentoId"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DocumentoId");

                    b.ToTable("Documento", (string)null);

                    b.HasData(
                        new
                        {
                            DocumentoId = 1,
                            Descripcion = "Factura A"
                        },
                        new
                        {
                            DocumentoId = 2,
                            Descripcion = "Factura B"
                        },
                        new
                        {
                            DocumentoId = 3,
                            Descripcion = "Nota de Crédito"
                        },
                        new
                        {
                            DocumentoId = 4,
                            Descripcion = "Nota de Débito"
                        },
                        new
                        {
                            DocumentoId = 5,
                            Descripcion = "Recibo"
                        },
                        new
                        {
                            DocumentoId = 6,
                            Descripcion = "Orden de Compra"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Factura", b =>
                {
                    b.Property<int>("FacturaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FacturaId"));

                    b.Property<int>("DocumentoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("date");

                    b.Property<int>("MedioPagoId")
                        .HasColumnType("int")
                        .HasColumnName("MedioDePago");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.Property<Guid>("VentaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FacturaId");

                    b.HasIndex("DocumentoId");

                    b.HasIndex("MedioPagoId");

                    b.HasIndex("VentaId")
                        .IsUnique();

                    b.ToTable("Factura", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemId"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("PrecioTotalItem")
                        .HasColumnType("int");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("Producto");

                    b.Property<Guid>("VentaId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Venta");

                    b.HasKey("ItemId");

                    b.HasIndex("ProductoId");

                    b.HasIndex("VentaId");

                    b.ToTable("ItemDetalle", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.MedioPago", b =>
                {
                    b.Property<int>("MedioPagoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedioPagoId"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedioPagoId");

                    b.ToTable("MedioPago");

                    b.HasData(
                        new
                        {
                            MedioPagoId = 1,
                            Descripcion = "Efectivo"
                        },
                        new
                        {
                            MedioPagoId = 2,
                            Descripcion = "Tarjeta de Crédito"
                        },
                        new
                        {
                            MedioPagoId = 3,
                            Descripcion = "Tarjeta de Débito"
                        },
                        new
                        {
                            MedioPagoId = 4,
                            Descripcion = "Transferencia Bancaria"
                        },
                        new
                        {
                            MedioPagoId = 5,
                            Descripcion = "PayPal"
                        },
                        new
                        {
                            MedioPagoId = 6,
                            Descripcion = "QR"
                        });
                });

            modelBuilder.Entity("Domain.Entities.OrdenDeCompra", b =>
                {
                    b.Property<int>("OrdenDeCompraId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrdenDeCompraId"));

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("PrecioTotal")
                        .HasColumnType("int");

                    b.HasKey("OrdenDeCompraId");

                    b.ToTable("OrdenDeCompra", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.OrdenDeCompraProducto", b =>
                {
                    b.Property<int>("OrdenDeCompraProductoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrdenDeCompraProductoId"));

                    b.Property<int>("ArticuloProveedorId")
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("OrdenDeCompraId")
                        .HasColumnType("int")
                        .HasColumnName("OrdenDeCompra");

                    b.Property<int>("TotalLinea")
                        .HasColumnType("int");

                    b.HasKey("OrdenDeCompraProductoId");

                    b.HasIndex("ArticuloProveedorId");

                    b.HasIndex("OrdenDeCompraId");

                    b.ToTable("OrdenDeCompraProducto", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Producto", b =>
                {
                    b.Property<int>("ProductoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductoId"));

                    b.Property<int>("Cilindro")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fecha")
                        .HasColumnType("int");

                    b.Property<string>("Imagen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumeroChasis")
                        .HasColumnType("int");

                    b.Property<int>("NumeroMotor")
                        .HasColumnType("int");

                    b.Property<int>("PrecioUnitario")
                        .HasColumnType("int");

                    b.Property<string>("Rubro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StockActual")
                        .HasColumnType("int");

                    b.Property<int>("StockMaximo")
                        .HasColumnType("int");

                    b.Property<int>("StockMinimo")
                        .HasColumnType("int");

                    b.HasKey("ProductoId");

                    b.ToTable("Producto", (string)null);

                    b.HasData(
                        new
                        {
                            ProductoId = 1,
                            Cilindro = 689,
                            Descripcion = "Motocicleta deportiva ligera y ágil.",
                            Fecha = 2024,
                            Imagen = "https://i.postimg.cc/rpJWcK0L/2023-Yamaha-MT07-A-EU-Cyan-Storm-360-Degrees-001-03.jpg",
                            Marca = "Yamaha",
                            Modelo = "MT-07",
                            Nombre = "Yamaha MT-07",
                            NumeroChasis = 789012,
                            NumeroMotor = 123456,
                            PrecioUnitario = 150000,
                            Rubro = "Motocicleta",
                            StockActual = 6,
                            StockMaximo = 100,
                            StockMinimo = 3
                        },
                        new
                        {
                            ProductoId = 2,
                            Cilindro = 500,
                            Descripcion = "Motocicleta naked para uso urbano y carretera.",
                            Fecha = 2024,
                            Imagen = "https://i.postimg.cc/50KCYTS7/honda-cb-500-f.jpg",
                            Marca = "Honda",
                            Modelo = "CB500F",
                            Nombre = "Honda CB500F",
                            NumeroChasis = 334455,
                            NumeroMotor = 223344,
                            PrecioUnitario = 180000,
                            Rubro = "Motocicleta",
                            StockActual = 7,
                            StockMaximo = 100,
                            StockMinimo = 3
                        },
                        new
                        {
                            ProductoId = 3,
                            Cilindro = 399,
                            Descripcion = "Motocicleta deportiva de baja cilindrada.",
                            Fecha = 2024,
                            Imagen = "https://i.postimg.cc/tJVY1TTJ/ninja400-KRT-1-1.jpg",
                            Marca = "Kawasaki",
                            Modelo = "Ninja 400",
                            Nombre = "Kawasaki Ninja 400",
                            NumeroChasis = 889900,
                            NumeroMotor = 556677,
                            PrecioUnitario = 200000,
                            Rubro = "Motocicleta",
                            StockActual = 10,
                            StockMaximo = 100,
                            StockMinimo = 3
                        },
                        new
                        {
                            ProductoId = 4,
                            Cilindro = 645,
                            Descripcion = "Motocicleta adventure de media cilindrada.",
                            Fecha = 2024,
                            Imagen = "https://i.postimg.cc/NjtkchJm/muo3kk8n0sjdherhbjzvqyytgylzz8hcmvkfdusy.jpg",
                            Marca = "Suzuki",
                            Modelo = "V-Strom 650",
                            Nombre = "Suzuki V-Strom 650",
                            NumeroChasis = 665544,
                            NumeroMotor = 998877,
                            PrecioUnitario = 160000,
                            Rubro = "Motocicleta",
                            StockActual = 8,
                            StockMaximo = 100,
                            StockMinimo = 3
                        },
                        new
                        {
                            ProductoId = 5,
                            Cilindro = 1254,
                            Descripcion = "Motocicleta adventure de alta gama.",
                            Fecha = 2024,
                            Imagen = "https://i.postimg.cc/W4WGgd2w/image.jpg",
                            Marca = "BMW",
                            Modelo = "R 1250 GS",
                            Nombre = "BMW R 1250 GS",
                            NumeroChasis = 223344,
                            NumeroMotor = 554433,
                            PrecioUnitario = 300000,
                            Rubro = "Motocicleta",
                            StockActual = 4,
                            StockMaximo = 100,
                            StockMinimo = 3
                        },
                        new
                        {
                            ProductoId = 6,
                            Cilindro = 821,
                            Descripcion = "Motocicleta naked de alto rendimiento.",
                            Fecha = 2024,
                            Imagen = "https://i.postimg.cc/RCn7JC2w/Monster-821-MY18-Red-01-Model-Preview-1050x650.png",
                            Marca = "Ducati",
                            Modelo = "Monster 821",
                            Nombre = "Ducati Monster 821",
                            NumeroChasis = 445566,
                            NumeroMotor = 112233,
                            PrecioUnitario = 250000,
                            Rubro = "Motocicleta",
                            StockActual = 4,
                            StockMaximo = 100,
                            StockMinimo = 3
                        },
                        new
                        {
                            ProductoId = 7,
                            Cilindro = 883,
                            Descripcion = "Motocicleta cruiser clásica.",
                            Fecha = 2024,
                            Imagen = "https://i.postimg.cc/X7SwfS0m/54c33236a8ad91156a9e611375b4d973-a18dd478b82157f1.png",
                            Marca = "Harley-Davidson",
                            Modelo = "Iron 883",
                            Nombre = "Harley-Davidson Iron 883",
                            NumeroChasis = 123456,
                            NumeroMotor = 778899,
                            PrecioUnitario = 400000,
                            Rubro = "Motocicleta",
                            StockActual = 5,
                            StockMaximo = 100,
                            StockMinimo = 3
                        });
                });

            modelBuilder.Entity("Domain.Entities.Proveedor", b =>
                {
                    b.Property<int>("ProveedorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProveedorId"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cuit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Localidad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Provincia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RazonSocial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Telefono")
                        .HasColumnType("int");

                    b.HasKey("ProveedorId");

                    b.ToTable("Proveedor", (string)null);

                    b.HasData(
                        new
                        {
                            ProveedorId = 1,
                            Apellido = "Perez",
                            Cuit = "20234567897",
                            Direccion = "Av. Libertador 1234",
                            Email = "juan@gmail.com",
                            Localidad = "Capital Federal",
                            Nombre = "Juan",
                            Provincia = "Buenos Aires",
                            RazonSocial = "Moto Parts Ltd.",
                            Telefono = 1112345678
                        },
                        new
                        {
                            ProveedorId = 2,
                            Apellido = "Torres",
                            Cuit = "20234567899",
                            Direccion = "Calle Falsa 5678",
                            Email = "torres@yahoo,com",
                            Localidad = "Quilmes",
                            Nombre = "Gabriel",
                            Provincia = "Buenos Aires",
                            RazonSocial = "Moto Accessories S.A.",
                            Telefono = 1123456789
                        },
                        new
                        {
                            ProveedorId = 3,
                            Apellido = "Sanchez",
                            Cuit = "23415689741",
                            Direccion = "Avenida Rivadavia 4321",
                            Email = "ramon@gmail.com",
                            Localidad = "Florencio Varela",
                            Nombre = "Ramon",
                            Provincia = "Buenos Aires",
                            RazonSocial = "Motorcycle World",
                            Telefono = 114567890
                        },
                        new
                        {
                            ProveedorId = 4,
                            Apellido = "Cuello",
                            Cuit = "20356457899",
                            Direccion = "Calle Moreno 8765",
                            Email = "marcos@gmail.com",
                            Localidad = "Capital Federal",
                            Nombre = "Marcos",
                            Provincia = "Buenos Aires",
                            RazonSocial = "Bike Gear Co.",
                            Telefono = 1145678901
                        },
                        new
                        {
                            ProveedorId = 5,
                            Apellido = "Bernis",
                            Cuit = "23367894567",
                            Direccion = "Calle Alem 9876",
                            Email = "bernis@hotmail.com",
                            Localidad = "La Plata",
                            Nombre = "Jose",
                            Provincia = "Buenos Aires",
                            RazonSocial = "Moto Supplies Inc.",
                            Telefono = 1156789012
                        });
                });

            modelBuilder.Entity("Domain.Entities.Vendedor", b =>
                {
                    b.Property<int>("VendedorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VendedorId"));

                    b.Property<string>("VendedorApellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VendedorDni")
                        .HasColumnType("int");

                    b.Property<string>("VendedorDomicilio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendedorEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendedorLocalidad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendedorNombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendedorProvincia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendedorPuesto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VendedorTelefono")
                        .HasColumnType("int");

                    b.HasKey("VendedorId");

                    b.ToTable("Vendedor", (string)null);

                    b.HasData(
                        new
                        {
                            VendedorId = 1,
                            VendedorApellido = "Gomez",
                            VendedorDni = 33456789,
                            VendedorDomicilio = "Calle 30 2659",
                            VendedorEmail = "pedro@gmail.com",
                            VendedorLocalidad = "Berazategui",
                            VendedorNombre = "Pedro",
                            VendedorProvincia = "Buenos Aires",
                            VendedorPuesto = "Vendedor Principal",
                            VendedorTelefono = 1523467895
                        },
                        new
                        {
                            VendedorId = 2,
                            VendedorApellido = "Rodriguez",
                            VendedorDni = 40256897,
                            VendedorDomicilio = "Calle 132 4567",
                            VendedorEmail = "laura@gmail.com",
                            VendedorLocalidad = "Berazategui",
                            VendedorNombre = "Laura",
                            VendedorProvincia = "Buenos Aires",
                            VendedorPuesto = "Vendedora",
                            VendedorTelefono = 1547896321
                        },
                        new
                        {
                            VendedorId = 3,
                            VendedorApellido = "Gimenez",
                            VendedorDni = 38526478,
                            VendedorDomicilio = "Calle 145 5047",
                            VendedorEmail = "andres@gmail.com",
                            VendedorLocalidad = "Berazategui",
                            VendedorNombre = "Andrés",
                            VendedorProvincia = "Buenos Aires",
                            VendedorPuesto = "Vendedor",
                            VendedorTelefono = 1578451236
                        },
                        new
                        {
                            VendedorId = 4,
                            VendedorApellido = "Saucedo",
                            VendedorDni = 23456789,
                            VendedorDomicilio = "Calle 38 4568",
                            VendedorEmail = "sofia@gmail.com",
                            VendedorLocalidad = "Berazategui",
                            VendedorNombre = "Sofía",
                            VendedorProvincia = "Buenos Aires",
                            VendedorPuesto = "Vendedora",
                            VendedorTelefono = 1547526389
                        },
                        new
                        {
                            VendedorId = 5,
                            VendedorApellido = "Souto",
                            VendedorDni = 34568791,
                            VendedorDomicilio = "Calle 33 2356",
                            VendedorEmail = "miguel@gmail.com",
                            VendedorLocalidad = "Berazategui",
                            VendedorNombre = "Miguel",
                            VendedorProvincia = "Buenos Aires",
                            VendedorPuesto = "Vendedor ",
                            VendedorTelefono = 1545678912
                        });
                });

            modelBuilder.Entity("Domain.Entities.Venta", b =>
                {
                    b.Property<Guid>("VentaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int")
                        .HasColumnName("cliente");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("fecha");

                    b.Property<int>("TotalVenta")
                        .HasColumnType("int");

                    b.Property<int>("VendedorId")
                        .HasColumnType("int")
                        .HasColumnName("Vendedor");

                    b.HasKey("VentaId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("VendedorId");

                    b.ToTable("Venta", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ArticuloProveedor", b =>
                {
                    b.HasOne("Domain.Entities.Producto", "Producto")
                        .WithMany("ArticuloProveedor")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Proveedor", "Proveedor")
                        .WithMany("ArticuloProveedor")
                        .HasForeignKey("ProveedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("Domain.Entities.Factura", b =>
                {
                    b.HasOne("Domain.Entities.Documento", "Documento")
                        .WithMany("Facturas")
                        .HasForeignKey("DocumentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.MedioPago", "MedioPago")
                        .WithMany("Facturas")
                        .HasForeignKey("MedioPagoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Venta", "Venta")
                        .WithOne("factura")
                        .HasForeignKey("Domain.Entities.Factura", "VentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Documento");

                    b.Navigation("MedioPago");

                    b.Navigation("Venta");
                });

            modelBuilder.Entity("Domain.Entities.Item", b =>
                {
                    b.HasOne("Domain.Entities.Producto", "Producto")
                        .WithMany("Items")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Venta", "Venta")
                        .WithMany("Items")
                        .HasForeignKey("VentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");

                    b.Navigation("Venta");
                });

            modelBuilder.Entity("Domain.Entities.OrdenDeCompraProducto", b =>
                {
                    b.HasOne("Domain.Entities.ArticuloProveedor", "ArticuloProveedor")
                        .WithMany("OrdenDeCompraProducto")
                        .HasForeignKey("ArticuloProveedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.OrdenDeCompra", "OrdenDeCompra")
                        .WithMany("OrdenDeCompraProducto")
                        .HasForeignKey("OrdenDeCompraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArticuloProveedor");

                    b.Navigation("OrdenDeCompra");
                });

            modelBuilder.Entity("Domain.Entities.Venta", b =>
                {
                    b.HasOne("Domain.Entities.Cliente", "Cliente")
                        .WithMany("Ventas")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Vendedor", "Vendedor")
                        .WithMany("Ventas")
                        .HasForeignKey("VendedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Vendedor");
                });

            modelBuilder.Entity("Domain.Entities.ArticuloProveedor", b =>
                {
                    b.Navigation("OrdenDeCompraProducto");
                });

            modelBuilder.Entity("Domain.Entities.Cliente", b =>
                {
                    b.Navigation("Ventas");
                });

            modelBuilder.Entity("Domain.Entities.Documento", b =>
                {
                    b.Navigation("Facturas");
                });

            modelBuilder.Entity("Domain.Entities.MedioPago", b =>
                {
                    b.Navigation("Facturas");
                });

            modelBuilder.Entity("Domain.Entities.OrdenDeCompra", b =>
                {
                    b.Navigation("OrdenDeCompraProducto");
                });

            modelBuilder.Entity("Domain.Entities.Producto", b =>
                {
                    b.Navigation("ArticuloProveedor");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("Domain.Entities.Proveedor", b =>
                {
                    b.Navigation("ArticuloProveedor");
                });

            modelBuilder.Entity("Domain.Entities.Vendedor", b =>
                {
                    b.Navigation("Ventas");
                });

            modelBuilder.Entity("Domain.Entities.Venta", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("factura")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
